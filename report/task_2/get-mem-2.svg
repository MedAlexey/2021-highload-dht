<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (57,525 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (57,525 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="766.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (617 samples, 1.07%)</title><rect x="10.0" y="739.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (617 samples, 1.07%)</title><rect x="10.0" y="723.0" width="12.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (56,908 samples, 98.93%)</title><rect x="22.7" y="739.0" width="1167.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.7" y="750.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (56,908 samples, 98.93%)</title><rect x="22.7" y="723.0" width="1167.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.7" y="734.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (56,908 samples, 98.93%)</title><rect x="22.7" y="707.0" width="1167.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.7" y="718.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (54,111 samples, 94.07%)</title><rect x="22.7" y="691.0" width="1109.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.7" y="702.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (54,111 samples, 94.07%)</title><rect x="22.7" y="675.0" width="1109.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="25.7" y="686.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (53,850 samples, 93.61%)</title><rect x="22.7" y="659.0" width="1104.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.7" y="670.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (644 samples, 1.12%)</title><rect x="22.7" y="643.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (644 samples, 1.12%)</title><rect x="22.7" y="627.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (464 samples, 0.81%)</title><rect x="22.7" y="611.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.7" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (464 samples, 0.81%)</title><rect x="22.7" y="595.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.7" y="606.0"></text>
</g>
<g>
<title>byte[] (464 samples, 0.81%)</title><rect x="22.7" y="579.0" width="9.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="25.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (180 samples, 0.31%)</title><rect x="32.2" y="611.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.2" y="622.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (180 samples, 0.31%)</title><rect x="32.2" y="595.0" width="3.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="35.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (297 samples, 0.52%)</title><rect x="35.9" y="643.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (297 samples, 0.52%)</title><rect x="35.9" y="627.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="38.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (297 samples, 0.52%)</title><rect x="35.9" y="611.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (297 samples, 0.52%)</title><rect x="35.9" y="595.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (297 samples, 0.52%)</title><rect x="35.9" y="579.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="38.9" y="590.0"></text>
</g>
<g>
<title>java.lang.String (129 samples, 0.22%)</title><rect x="35.9" y="563.0" width="2.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="38.9" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (168 samples, 0.29%)</title><rect x="38.5" y="563.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.5" y="574.0"></text>
</g>
<g>
<title>byte[] (168 samples, 0.29%)</title><rect x="38.5" y="547.0" width="3.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="41.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/medalexey/ServiceImpl.entity (52,909 samples, 91.98%)</title><rect x="42.0" y="643.0" width="1085.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.0" y="654.0">ru/mail/polis/service/medalexey/ServiceImpl.entity</text>
</g>
<g>
<title>ru/mail/polis/service/medalexey/ServiceImpl.get (52,909 samples, 91.98%)</title><rect x="42.0" y="627.0" width="1085.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.0" y="638.0">ru/mail/polis/service/medalexey/ServiceImpl.get</text>
</g>
<g>
<title>java/lang/String.getBytes (141 samples, 0.25%)</title><rect x="42.0" y="611.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (141 samples, 0.25%)</title><rect x="42.0" y="595.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.0" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (141 samples, 0.25%)</title><rect x="42.0" y="579.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.0" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (141 samples, 0.25%)</title><rect x="42.0" y="563.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.0" y="574.0"></text>
</g>
<g>
<title>byte[] (141 samples, 0.25%)</title><rect x="42.0" y="547.0" width="2.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="45.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (286 samples, 0.50%)</title><rect x="44.9" y="611.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (286 samples, 0.50%)</title><rect x="44.9" y="595.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.9" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (286 samples, 0.50%)</title><rect x="44.9" y="579.0" width="5.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="47.9" y="590.0"></text>
</g>
<g>
<title>one.nio.http.Response (113 samples, 0.20%)</title><rect x="50.7" y="611.0" width="2.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="53.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (449 samples, 0.78%)</title><rect x="53.0" y="611.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.0" y="622.0"></text>
</g>
<g>
<title>byte[] (164 samples, 0.29%)</title><rect x="53.0" y="595.0" width="3.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="56.0" y="606.0"></text>
</g>
<g>
<title>java.lang.String[] (171 samples, 0.30%)</title><rect x="56.4" y="595.0" width="3.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="59.4" y="606.0"></text>
</g>
<g>
<title>java.lang.String (114 samples, 0.20%)</title><rect x="59.9" y="595.0" width="2.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="62.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/DAO.nextKey (447 samples, 0.78%)</title><rect x="62.2" y="611.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (447 samples, 0.78%)</title><rect x="62.2" y="595.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.2" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (263 samples, 0.46%)</title><rect x="62.2" y="579.0" width="5.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="65.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (184 samples, 0.32%)</title><rect x="67.6" y="579.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.6" y="590.0"></text>
</g>
<g>
<title>byte[] (184 samples, 0.32%)</title><rect x="67.6" y="563.0" width="3.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="70.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/Record.getValue (303 samples, 0.53%)</title><rect x="71.4" y="611.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.4" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (303 samples, 0.53%)</title><rect x="71.4" y="595.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.4" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (303 samples, 0.53%)</title><rect x="71.4" y="579.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.4" y="590.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (303 samples, 0.53%)</title><rect x="71.4" y="563.0" width="6.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="74.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO$1.hasNext (1,864 samples, 3.24%)</title><rect x="77.6" y="611.0" width="38.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.6" y="622.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,864 samples, 3.24%)</title><rect x="77.6" y="595.0" width="38.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.6" y="606.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="579.0" width="38.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.6" y="590.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="563.0" width="38.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.6" y="574.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="547.0" width="38.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.6" y="558.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,864 samples, 3.24%)</title><rect x="77.6" y="531.0" width="38.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.6" y="542.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="515.0" width="38.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.6" y="526.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="499.0" width="38.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.6" y="510.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="483.0" width="38.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.6" y="494.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,864 samples, 3.24%)</title><rect x="77.6" y="467.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.6" y="478.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="451.0" width="38.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.6" y="462.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="435.0" width="38.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.6" y="446.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="419.0" width="38.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.6" y="430.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,864 samples, 3.24%)</title><rect x="77.6" y="403.0" width="38.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.6" y="414.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="387.0" width="38.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.6" y="398.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="371.0" width="38.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.6" y="382.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="355.0" width="38.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.6" y="366.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,864 samples, 3.24%)</title><rect x="77.6" y="339.0" width="38.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="350.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="323.0" width="38.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="80.6" y="334.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="307.0" width="38.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.6" y="318.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="291.0" width="38.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.6" y="302.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,864 samples, 3.24%)</title><rect x="77.6" y="275.0" width="38.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.6" y="286.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="259.0" width="38.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.6" y="270.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,864 samples, 3.24%)</title><rect x="77.6" y="243.0" width="38.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="254.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,863 samples, 3.24%)</title><rect x="77.6" y="227.0" width="38.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.6" y="238.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,863 samples, 3.24%)</title><rect x="77.6" y="211.0" width="38.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.6" y="222.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,238 samples, 2.15%)</title><rect x="77.6" y="195.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.6" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/MergeIterator.next (1,238 samples, 2.15%)</title><rect x="77.6" y="179.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.6" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.next (1,238 samples, 2.15%)</title><rect x="77.6" y="163.0" width="25.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.6" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/PeekingIterator.peek (1,238 samples, 2.15%)</title><rect x="77.6" y="147.0" width="25.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.6" y="158.0">r..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/RangeIterator.next (1,238 samples, 2.15%)</title><rect x="77.6" y="131.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.6" y="142.0">r..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/RangeIterator.next (1,238 samples, 2.15%)</title><rect x="77.6" y="115.0" width="25.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="126.0">r..</text>
</g>
<g>
<title>ru/mail/polis/lsm/Record.of (819 samples, 1.42%)</title><rect x="77.6" y="99.0" width="16.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.6" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (361 samples, 0.63%)</title><rect x="77.6" y="83.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.6" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (361 samples, 0.63%)</title><rect x="77.6" y="67.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.6" y="78.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (361 samples, 0.63%)</title><rect x="77.6" y="51.0" width="7.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="80.6" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.Record (82 samples, 0.14%)</title><rect x="85.0" y="83.0" width="1.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="88.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/Record.&lt;init&gt; (376 samples, 0.65%)</title><rect x="86.7" y="83.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.7" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (376 samples, 0.65%)</title><rect x="86.7" y="67.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.7" y="78.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (376 samples, 0.65%)</title><rect x="86.7" y="51.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.7" y="62.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (376 samples, 0.65%)</title><rect x="86.7" y="35.0" width="7.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="89.7" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/RangeIterator.read (419 samples, 0.73%)</title><rect x="94.4" y="99.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.4" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (419 samples, 0.73%)</title><rect x="94.4" y="83.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.4" y="94.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (419 samples, 0.73%)</title><rect x="94.4" y="67.0" width="8.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="97.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/RangeIterator.next (625 samples, 1.09%)</title><rect x="103.0" y="195.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/RangeIterator.next (625 samples, 1.09%)</title><rect x="103.0" y="179.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/Record.of (436 samples, 0.76%)</title><rect x="103.0" y="163.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (203 samples, 0.35%)</title><rect x="103.0" y="147.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.0" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (203 samples, 0.35%)</title><rect x="103.0" y="131.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.0" y="142.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (203 samples, 0.35%)</title><rect x="103.0" y="115.0" width="4.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="106.0" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.Record (34 samples, 0.06%)</title><rect x="107.2" y="147.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="110.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/Record.&lt;init&gt; (199 samples, 0.35%)</title><rect x="107.9" y="147.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="110.9" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (199 samples, 0.35%)</title><rect x="107.9" y="131.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.9" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (199 samples, 0.35%)</title><rect x="107.9" y="115.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.9" y="126.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (199 samples, 0.35%)</title><rect x="107.9" y="99.0" width="4.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="110.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/RangeIterator.read (189 samples, 0.33%)</title><rect x="112.0" y="163.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.0" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (189 samples, 0.33%)</title><rect x="112.0" y="147.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.0" y="158.0"></text>
</g>
<g>
<title>java.nio.DirectByteBufferR (189 samples, 0.33%)</title><rect x="112.0" y="131.0" width="3.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="115.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.range (49,161 samples, 85.46%)</title><rect x="115.9" y="611.0" width="1008.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.9" y="622.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.range</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (167 samples, 0.29%)</title><rect x="115.9" y="595.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.9" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Values (167 samples, 0.29%)</title><rect x="115.9" y="579.0" width="3.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="118.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (300 samples, 0.52%)</title><rect x="119.3" y="595.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.3" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (300 samples, 0.52%)</title><rect x="119.3" y="579.0" width="6.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="122.3" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (422 samples, 0.73%)</title><rect x="125.4" y="595.0" width="8.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="128.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.filterTombstones (116 samples, 0.20%)</title><rect x="134.1" y="595.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.1" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (116 samples, 0.20%)</title><rect x="134.1" y="579.0" width="2.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="137.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.map (406 samples, 0.71%)</title><rect x="136.5" y="595.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.subMap (406 samples, 0.71%)</title><rect x="136.5" y="579.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.subMap (406 samples, 0.71%)</title><rect x="136.5" y="563.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.subMap (406 samples, 0.71%)</title><rect x="136.5" y="547.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.5" y="558.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (406 samples, 0.71%)</title><rect x="136.5" y="531.0" width="8.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="139.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (235 samples, 0.41%)</title><rect x="144.8" y="595.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.8" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (235 samples, 0.41%)</title><rect x="144.8" y="579.0" width="4.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="147.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.sstableRanges (47,515 samples, 82.60%)</title><rect x="149.6" y="595.0" width="974.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.6" y="606.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.sstableRanges</text>
</g>
<g>
<title>java.util.ArrayList (113 samples, 0.20%)</title><rect x="149.6" y="579.0" width="2.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="152.6" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (997 samples, 1.73%)</title><rect x="151.9" y="579.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.9" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (997 samples, 1.73%)</title><rect x="151.9" y="563.0" width="20.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="154.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge (25,551 samples, 44.42%)</title><rect x="172.4" y="579.0" width="524.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.4" y="590.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge</text>
</g>
<g>
<title>java/util/ArrayList.subList (275 samples, 0.48%)</title><rect x="172.4" y="563.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.4" y="574.0"></text>
</g>
<g>
<title>java.util.ArrayList$SubList (275 samples, 0.48%)</title><rect x="172.4" y="547.0" width="5.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="175.4" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (215 samples, 0.37%)</title><rect x="178.0" y="563.0" width="4.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="181.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge (24,963 samples, 43.40%)</title><rect x="182.5" y="563.0" width="512.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.5" y="574.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge</text>
</g>
<g>
<title>java/util/ArrayList$SubList.subList (571 samples, 0.99%)</title><rect x="182.5" y="547.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.5" y="558.0"></text>
</g>
<g>
<title>java.util.ArrayList$SubList (571 samples, 0.99%)</title><rect x="182.5" y="531.0" width="11.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="185.5" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (427 samples, 0.74%)</title><rect x="194.2" y="547.0" width="8.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="197.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge (23,758 samples, 41.30%)</title><rect x="202.9" y="547.0" width="487.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.9" y="558.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge</text>
</g>
<g>
<title>java/util/ArrayList$SubList.subList (1,148 samples, 2.00%)</title><rect x="202.9" y="531.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.9" y="542.0">j..</text>
</g>
<g>
<title>java.util.ArrayList$SubList (1,148 samples, 2.00%)</title><rect x="202.9" y="515.0" width="23.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="205.9" y="526.0">j..</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (940 samples, 1.63%)</title><rect x="226.5" y="531.0" width="19.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="229.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge (21,193 samples, 36.84%)</title><rect x="245.8" y="531.0" width="434.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.8" y="542.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge</text>
</g>
<g>
<title>java/util/ArrayList$SubList.subList (2,531 samples, 4.40%)</title><rect x="245.8" y="515.0" width="51.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.8" y="526.0">java/..</text>
</g>
<g>
<title>java.util.ArrayList$SubList (2,531 samples, 4.40%)</title><rect x="245.8" y="499.0" width="51.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="248.8" y="510.0">java...</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (1,795 samples, 3.12%)</title><rect x="297.7" y="515.0" width="36.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="300.7" y="526.0">ru...</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge (15,896 samples, 27.63%)</title><rect x="334.5" y="515.0" width="326.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.5" y="526.0">ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge</text>
</g>
<g>
<title>java/util/ArrayList$SubList.subList (4,718 samples, 8.20%)</title><rect x="334.5" y="499.0" width="96.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.5" y="510.0">java/util/A..</text>
</g>
<g>
<title>java.util.ArrayList$SubList (4,718 samples, 8.20%)</title><rect x="334.5" y="483.0" width="96.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="337.5" y="494.0">java.util.A..</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (3,586 samples, 6.23%)</title><rect x="431.3" y="499.0" width="73.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="434.3" y="510.0">ru.mail...</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.merge (5,716 samples, 9.94%)</title><rect x="504.8" y="499.0" width="117.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.8" y="510.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.PeekingIterator (3,842 samples, 6.68%)</title><rect x="504.8" y="483.0" width="78.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="507.8" y="494.0">ru.mail.p..</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (1,874 samples, 3.26%)</title><rect x="583.6" y="483.0" width="38.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.6" y="494.0">ru/..</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (1,874 samples, 3.26%)</title><rect x="583.6" y="467.0" width="38.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="586.6" y="478.0">ru...</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (1,876 samples, 3.26%)</title><rect x="622.1" y="499.0" width="38.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="625.1" y="510.0">ru/..</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (1,876 samples, 3.26%)</title><rect x="622.1" y="483.0" width="38.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="625.1" y="494.0">ru...</text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (971 samples, 1.69%)</title><rect x="660.6" y="515.0" width="19.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.6" y="526.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (971 samples, 1.69%)</title><rect x="660.6" y="499.0" width="19.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="663.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (477 samples, 0.83%)</title><rect x="680.5" y="531.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="683.5" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (477 samples, 0.83%)</title><rect x="680.5" y="515.0" width="9.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="683.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (207 samples, 0.36%)</title><rect x="690.3" y="547.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.3" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (207 samples, 0.36%)</title><rect x="690.3" y="531.0" width="4.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="693.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/LsmDAO.mergeTwo (98 samples, 0.17%)</title><rect x="694.5" y="563.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.5" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.MergeIterator (98 samples, 0.17%)</title><rect x="694.5" y="547.0" width="2.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="697.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/lsm/artemdrozdov/SSTable.range (20,854 samples, 36.25%)</title><rect x="696.5" y="579.0" width="427.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.5" y="590.0">ru/mail/polis/lsm/artemdrozdov/SSTable.range</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (14,460 samples, 25.14%)</title><rect x="696.5" y="563.0" width="296.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="699.5" y="574.0">java/nio/DirectByteBufferR.asReadOnlyBuf..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (14,460 samples, 25.14%)</title><rect x="696.5" y="547.0" width="296.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="699.5" y="558.0">java/nio/DirectByteBufferR.duplicate</text>
</g>
<g>
<title>java.nio.DirectByteBufferR (14,460 samples, 25.14%)</title><rect x="696.5" y="531.0" width="296.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="699.5" y="542.0">java.nio.DirectByteBufferR</text>
</g>
<g>
<title>ru.mail.polis.lsm.artemdrozdov.RangeIterator (6,394 samples, 11.12%)</title><rect x="993.1" y="563.0" width="131.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="996.1" y="574.0">ru.mail.polis.ls..</text>
</g>
<g>
<title>ru/mail/polis/service/medalexey/ServiceImpl.extractBytes (145 samples, 0.25%)</title><rect x="1124.3" y="611.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1127.3" y="622.0"></text>
</g>
<g>
<title>byte[] (145 samples, 0.25%)</title><rect x="1124.3" y="595.0" width="3.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1127.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (261 samples, 0.45%)</title><rect x="1127.3" y="659.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1130.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (261 samples, 0.45%)</title><rect x="1127.3" y="643.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1130.3" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (261 samples, 0.45%)</title><rect x="1127.3" y="627.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1130.3" y="638.0"></text>
</g>
<g>
<title>java.lang.String (125 samples, 0.22%)</title><rect x="1127.3" y="611.0" width="2.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1130.3" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (136 samples, 0.24%)</title><rect x="1129.8" y="611.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1132.8" y="622.0"></text>
</g>
<g>
<title>byte[] (136 samples, 0.24%)</title><rect x="1129.8" y="595.0" width="2.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1132.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,368 samples, 2.38%)</title><rect x="1132.6" y="691.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1135.6" y="702.0">on..</text>
</g>
<g>
<title>one.nio.http.Request (164 samples, 0.29%)</title><rect x="1132.6" y="675.0" width="3.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1135.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (398 samples, 0.69%)</title><rect x="1136.0" y="675.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1139.0" y="686.0"></text>
</g>
<g>
<title>java.lang.String[] (398 samples, 0.69%)</title><rect x="1136.0" y="659.0" width="8.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1139.0" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (806 samples, 1.40%)</title><rect x="1144.2" y="675.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1147.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (806 samples, 1.40%)</title><rect x="1144.2" y="659.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1147.2" y="670.0"></text>
</g>
<g>
<title>char[] (484 samples, 0.84%)</title><rect x="1144.2" y="643.0" width="9.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1147.2" y="654.0"></text>
</g>
<g>
<title>java.lang.String (124 samples, 0.22%)</title><rect x="1154.1" y="643.0" width="2.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1157.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (198 samples, 0.34%)</title><rect x="1156.6" y="643.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1159.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (198 samples, 0.34%)</title><rect x="1156.6" y="627.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1159.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (198 samples, 0.34%)</title><rect x="1156.6" y="611.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1159.6" y="622.0"></text>
</g>
<g>
<title>byte[] (198 samples, 0.34%)</title><rect x="1156.6" y="595.0" width="4.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1159.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (139 samples, 0.24%)</title><rect x="1160.7" y="691.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1163.7" y="702.0"></text>
</g>
<g>
<title>byte[] (139 samples, 0.24%)</title><rect x="1160.7" y="675.0" width="2.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1163.7" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (234 samples, 0.41%)</title><rect x="1163.5" y="691.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1166.5" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.trim (234 samples, 0.41%)</title><rect x="1163.5" y="675.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1166.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (234 samples, 0.41%)</title><rect x="1163.5" y="659.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1166.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (234 samples, 0.41%)</title><rect x="1163.5" y="643.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>java.lang.String (109 samples, 0.19%)</title><rect x="1163.5" y="627.0" width="2.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1166.5" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (125 samples, 0.22%)</title><rect x="1165.8" y="627.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1168.8" y="638.0"></text>
</g>
<g>
<title>byte[] (125 samples, 0.22%)</title><rect x="1165.8" y="611.0" width="2.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1168.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,056 samples, 1.84%)</title><rect x="1168.3" y="691.0" width="21.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1171.3" y="702.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,056 samples, 1.84%)</title><rect x="1168.3" y="675.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1171.3" y="686.0">o..</text>
</g>
<g>
<title>char[] (512 samples, 0.89%)</title><rect x="1168.3" y="659.0" width="10.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>java.lang.String (200 samples, 0.35%)</title><rect x="1178.8" y="659.0" width="4.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (344 samples, 0.60%)</title><rect x="1182.9" y="659.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1185.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (344 samples, 0.60%)</title><rect x="1182.9" y="643.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (344 samples, 0.60%)</title><rect x="1182.9" y="627.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>byte[] (344 samples, 0.60%)</title><rect x="1182.9" y="611.0" width="7.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
</g>
</svg>
